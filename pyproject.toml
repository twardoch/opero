# this_file: pyproject.toml
[project]
name = "opero"
dynamic = ["version"]
description = "Resilient, parallel task orchestration for Python"
readme = "README.md"
requires-python = ">=3.8"
license = { file = "LICENSE" }
keywords = ["orchestration", "resilience", "retry", "fallback", "parallel", "concurrency", "rate-limiting"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]

dependencies = [
    "tenacity>=8.0.0",
    "asynciolimiter>=1.0.0",
]


[project.optional-dependencies]

dev = [
    "black>=23.1.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.0.243",
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "tenacity>=8.0.0",
    "asynciolimiter>=1.0.0",
    "pathos>=0.3.0",
    "aiomultiprocess>=0.9.0",
]

pathos = [
    "pathos>=0.3.0",
]

aiomultiprocess = [
    "aiomultiprocess>=0.9.0",
]

all = [
    "pathos>=0.3.0",
    "aiomultiprocess>=0.9.0",
]

[project.scripts]
# CLINAME = "opero.__main__:main"



[[project.authors]]
name = "Adam Twardoch"
email = "adam@twardoch.com"

[project.urls]
Documentation = "https://github.com/twardoch/opero#readme"
Issues = "https://github.com/twardoch/opero/issues"
Source = "https://github.com/twardoch/opero"


[build-system]
requires = [
    "hatchling>=1.27.0",     # Core build backend for Hatch
    "hatch-vcs>=0.4.0",      # Version Control System plugin for Hatch
]
build-backend = "hatchling.build"  # Use Hatchling as the build backend


[tool.coverage.paths]
opero = ["src/opero", "*/opero/src/opero"]
tests = ["tests", "*/opero/tests"]



[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.coverage.run]
source_pkgs = ["opero", "tests"]
branch = true
parallel = true
omit = [
    "src/opero/__about__.py",
]



[tool.hatch.build.hooks.vcs]
version-file = "src/opero/__version__.py"


[tool.hatch.build.targets.wheel]
packages = ["src/opero"]



[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
    "tenacity",
    "asynciolimiter",
    "pathos",
    "aiomultiprocess",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]


[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/opero --cov=tests {args:tests}"
type-check = "mypy src/opero tests"
lint = ["ruff check src/opero tests", "ruff format --respect-gitignore src/opero tests"]
fix = ["ruff check  --fix --unsafe-fixes src/opero tests", "ruff format --respect-gitignore src/opero tests"]



[tool.hatch.envs.lint]
detached = true
dependencies = [
    "tenacity>=8.0.0",
    "asynciolimiter>=1.0.0",
]


[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/opero tests}"
style = ["ruff check {args:.}", "ruff format --respect-gitignore {args:.}"]
fmt = ["ruff format --respect-gitignore {args:.}", "ruff check --fix {args:.}"]
all = ["style", "typing"]


[tool.hatch.envs.test]
dependencies = [
    "tenacity>=8.0.0",
    "asynciolimiter>=1.0.0",
    "pytest-asyncio>=0.21.0",
]

[tool.hatch.envs.test.scripts]
test = "python -m pytest -n auto -p no:briefcase {args:tests}"
test-cov = "python -m pytest -n auto -p no:briefcase --cov-report=term-missing --cov-config=pyproject.toml --cov=src/opero --cov=tests {args:tests}"
bench = "python -m pytest -v -p no:briefcase tests/test_benchmark.py --benchmark-only"
bench-save = "python -m pytest -v -p no:briefcase tests/test_benchmark.py --benchmark-only --benchmark-json=benchmark/results.json"

[tool.hatch.version]
source = "vcs"
path = 'src/opero/__version__.py'
pattern = "__version__\\s*=\\s*version\\s*=\\s*['\"](?P<version>[^'\"]+)['\"]"

[tool.hatch.version.raw-options]
version_scheme = "post-release"


[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true


[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
extend-select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = ["ARG001", "E501", "I001", "RUF001", "PLR2004", "EXE003", "ISC001"]



[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]





[tool.pytest.ini_options]
addopts = "-v --durations=10 -p no:briefcase"
asyncio_mode = "auto"
console_output_style = "progress"
filterwarnings = ["ignore::DeprecationWarning", "ignore::UserWarning"]
log_cli = true
log_cli_level = "INFO"
markers = [
  "benchmark: marks tests as benchmarks (select with '-m benchmark')",
  "unit: mark a test as a unit test",
  "integration: mark a test as an integration test",
  "permutation: tests for permutation functionality",
  "parameter: tests for parameter parsing",
  "prompt: tests for prompt parsing",
]
norecursedirs = [
  ".*",
  "build",
  "dist",
  "venv",
  "__pycache__",
  "*.egg-info",
  "_private",
]

python_classes = ["Test*"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
testpaths = ["tests"]


[tool.pytest-benchmark]
min_rounds = 100
min_time = 0.1
histogram = true
storage = "file"
save-data = true
compare = [
    "min",    # Minimum time
    "max",    # Maximum time
    "mean",   # Mean time
    "stddev", # Standard deviation
    "median", # Median time
    "iqr",    # Inter-quartile range
    "ops",    # Operations per second
    "rounds", # Number of rounds
]
