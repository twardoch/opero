2025-03-05 11:35:43 - 
=== PROJECT STATEMENT ===
2025-03-05 11:35:43 - ---
title: Opero Project Rules
glob: "**/*.py"
---

# Opero Project Rules

## Project Overview

Opero is a Python library for orchestrating function execution with retries, fallbacks, and concurrency control. It provides a flexible way to handle errors and ensure reliable execution of functions.

## Code Style

- Follow PEP 8 for code style
- Use type hints for all functions and methods
- Write clear docstrings for all public functions and classes
- Use f-strings for string formatting
- Keep functions and methods small and focused
- Extract complex logic into helper methods
- Use descriptive variable names

## Error Handling

- Use appropriate exception types
- Handle errors gracefully with retries and fallbacks
- Log errors with appropriate context
- Provide helpful error messages

## Testing

- Write unit tests for all functionality
- Test edge cases and error conditions
- Use pytest for testing
- Aim for high test coverage

## Logging

- Use the built-in logging module
- Log at appropriate levels (debug, info, warning, error)
- Include context in log messages
- Configure logging in a way that doesn't interfere with applications using the library

## Performance

- Optimize critical paths
- Minimize overhead in the orchestration layer
- Use async/await for I/O-bound operations
- Use appropriate concurrency mechanisms for CPU-bound operations 
2025-03-05 11:35:43 - 
=== Current Status ===
2025-03-05 11:35:43 - [ 896]  .
├── [  64]  .benchmarks
├── [  96]  .cursor
│   └── [ 128]  rules
│       ├── [1.3K]  0project.mdc
│       └── [2.1K]  filetree.mdc
├── [  96]  .github
│   └── [ 128]  workflows
│       ├── [2.7K]  push.yml
│       └── [1.4K]  release.yml
├── [3.5K]  .gitignore
├── [ 470]  .pre-commit-config.yaml
├── [  96]  .specstory
│   └── [ 288]  history
│       ├── [2.7K]  .what-is-this.md
│       ├── [574K]  2025-03-04_03-16-comprehensive-plan-for-opero-package-implementation.md
│       ├── [4.1K]  2025-03-04_05-40-cleanup-analysis-and-todo-update.md
│       ├── [157K]  2025-03-04_06-07-implementing-todo-md-phases-1-and-2.md
│       ├── [129K]  2025-03-04_07-28-implementing-todo-md-phases-1-and-2.md
│       ├── [ 67K]  2025-03-04_07-59-project-maintenance-and-documentation-update.md
│       └── [198K]  2025-03-04_08-40-managing-todo-list-tasks.md
├── [2.4K]  CHANGELOG.md
├── [1.4K]  CLEANUP.txt
├── [1.0K]  LICENSE
├── [ 959]  LOG.md
├── [ 23K]  README.md
├── [ 74K]  REPO_CONTENT.txt
├── [2.7K]  TODO.md
├── [ 13K]  cleanup.py
├── [ 224]  dist
│   └── [   0]  .gitkeep
├── [ 426]  package.toml
├── [6.1K]  pyproject.toml
├── [ 160]  src
│   ├── [  64]  .benchmarks
│   └── [ 448]  opero
│       ├── [1.1K]  __init__.py
│       ├── [ 130]  _version.py
│       ├── [9.9K]  concurrency.py
│       ├── [ 13K]  core.py
│       ├── [3.1K]  decorators.py
│       ├── [ 563]  exceptions.py
│       ├── [1.6K]  opero.py
│       ├── [4.0K]  rate_limit.py
│       ├── [ 13K]  retry.py
│       └── [6.8K]  utils.py
├── [ 192]  tests
│   ├── [4.2K]  test_core.py
│   ├── [4.1K]  test_decorators.py
│   └── [ 139]  test_package.py
└── [109K]  uv.lock

13 directories, 38 files

2025-03-05 11:35:43 - 
Project structure:
2025-03-05 11:35:43 - [ 896]  .
├── [  64]  .benchmarks
├── [  96]  .cursor
│   └── [ 128]  rules
│       ├── [1.3K]  0project.mdc
│       └── [2.1K]  filetree.mdc
├── [  96]  .github
│   └── [ 128]  workflows
│       ├── [2.7K]  push.yml
│       └── [1.4K]  release.yml
├── [3.5K]  .gitignore
├── [ 470]  .pre-commit-config.yaml
├── [  96]  .specstory
│   └── [ 288]  history
│       ├── [2.7K]  .what-is-this.md
│       ├── [574K]  2025-03-04_03-16-comprehensive-plan-for-opero-package-implementation.md
│       ├── [4.1K]  2025-03-04_05-40-cleanup-analysis-and-todo-update.md
│       ├── [157K]  2025-03-04_06-07-implementing-todo-md-phases-1-and-2.md
│       ├── [129K]  2025-03-04_07-28-implementing-todo-md-phases-1-and-2.md
│       ├── [ 67K]  2025-03-04_07-59-project-maintenance-and-documentation-update.md
│       └── [198K]  2025-03-04_08-40-managing-todo-list-tasks.md
├── [2.4K]  CHANGELOG.md
├── [1.4K]  CLEANUP.txt
├── [1.0K]  LICENSE
├── [ 959]  LOG.md
├── [ 23K]  README.md
├── [ 74K]  REPO_CONTENT.txt
├── [2.7K]  TODO.md
├── [ 13K]  cleanup.py
├── [ 224]  dist
│   └── [   0]  .gitkeep
├── [ 426]  package.toml
├── [6.1K]  pyproject.toml
├── [ 160]  src
│   ├── [  64]  .benchmarks
│   └── [ 448]  opero
│       ├── [1.1K]  __init__.py
│       ├── [ 130]  _version.py
│       ├── [9.9K]  concurrency.py
│       ├── [ 13K]  core.py
│       ├── [3.1K]  decorators.py
│       ├── [ 563]  exceptions.py
│       ├── [1.6K]  opero.py
│       ├── [4.0K]  rate_limit.py
│       ├── [ 13K]  retry.py
│       └── [6.8K]  utils.py
├── [ 192]  tests
│   ├── [4.2K]  test_core.py
│   ├── [4.1K]  test_decorators.py
│   └── [ 139]  test_package.py
└── [109K]  uv.lock

13 directories, 38 files

2025-03-05 11:35:43 - On branch main
Your branch is ahead of 'origin/main' by 2 commits.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   CLEANUP.txt
	modified:   REPO_CONTENT.txt

no changes added to commit (use "git add" and/or "git commit -a")

2025-03-05 11:35:43 - On branch main
Your branch is ahead of 'origin/main' by 2 commits.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   CLEANUP.txt
	modified:   REPO_CONTENT.txt

no changes added to commit (use "git add" and/or "git commit -a")

2025-03-05 11:35:43 - 
=== Environment Status ===
2025-03-05 11:35:43 - Setting up virtual environment
2025-03-05 11:35:43 - Virtual environment created and activated
2025-03-05 11:35:43 - Installing package with all extras
2025-03-05 11:35:43 - Setting up virtual environment
2025-03-05 11:35:43 - Virtual environment created and activated
2025-03-05 11:35:44 - Package installed successfully
2025-03-05 11:35:44 - Running code quality checks
2025-03-05 11:35:44 - >>> Running code fixes...
2025-03-05 11:35:44 - All checks passed!

2025-03-05 11:35:44 - 13 files left unchanged

2025-03-05 11:35:44 - >>>Running type checks...
2025-03-05 11:35:44 - >>> Running tests...
2025-03-05 11:35:47 - ============================= test session starts ==============================
platform darwin -- Python 3.12.8, pytest-8.3.5, pluggy-1.5.0 -- /Users/adam/Developer/vcs/github.twardoch/pub/opero/.venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/adam/Developer/vcs/github.twardoch/pub/opero
configfile: pyproject.toml
plugins: cov-6.0.0, asyncio-0.25.3
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=None
collecting ... collected 16 items

tests/test_core.py::test_fallback_chain_success PASSED                   [  6%]
tests/test_core.py::test_fallback_chain_fallback 
-------------------------------- live log call ---------------------------------
WARNING  opero.core:core.py:136 Primary function failed: Failed for value: 1
PASSED                                                                   [ 12%]
tests/test_core.py::test_fallback_chain_all_fail 
-------------------------------- live log call ---------------------------------
WARNING  opero.core:core.py:136 Primary function failed: Failed for value: 1
WARNING  opero.core:core.py:150 Fallback 1 failed: Failed for value: 1
ERROR    opero.core:core.py:154 All fallbacks failed
PASSED                                                                   [ 18%]
tests/test_core.py::test_fallback_chain_sync_function 
-------------------------------- live log call ---------------------------------
WARNING  opero.core:core.py:136 Primary function failed: Sync Failed for value: 1
PASSED                                                                   [ 25%]
tests/test_core.py::test_orchestrator_execute_success PASSED             [ 31%]
tests/test_core.py::test_orchestrator_execute_fallback 
-------------------------------- live log call ---------------------------------
WARNING  opero.core:core.py:136 Primary function failed: Failed for value: 1
PASSED                                                                   [ 37%]
tests/test_core.py::test_orchestrator_process PASSED                     [ 43%]
tests/test_core.py::test_orchestrator_process_with_concurrency PASSED    [ 50%]
tests/test_core.py::test_orchestrator_with_retry 
-------------------------------- live log call ---------------------------------
WARNING  opero.retry:retry.py:273 Attempt 1 failed: First attempt
Traceback (most recent call last):
  File "/Users/adam/Developer/vcs/github.twardoch/pub/opero/src/opero/retry.py", line 266, in retry_async
    result = await _execute_function(func, *args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/adam/Developer/vcs/github.twardoch/pub/opero/src/opero/retry.py", line 321, in _execute_function
    return await func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py", line 2300, in _execute_mock_call
    raise result
ValueError: First attempt
PASSED                                                                   [ 56%]
tests/test_decorators.py::test_orchestrate_decorator_basic PASSED        [ 62%]
tests/test_decorators.py::test_orchestrate_decorator_fallback 
-------------------------------- live log call ---------------------------------
WARNING  opero.core:core.py:136 Primary function failed: Failed for value: 1
PASSED                                                                   [ 68%]
tests/test_decorators.py::test_orchestrate_decorator_retry 
-------------------------------- live log call ---------------------------------
WARNING  opero.retry:retry.py:273 Attempt 1 failed: First attempt
Traceback (most recent call last):
  File "/Users/adam/Developer/vcs/github.twardoch/pub/opero/src/opero/retry.py", line 266, in retry_async
    result = await _execute_function(func, *args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/adam/Developer/vcs/github.twardoch/pub/opero/src/opero/retry.py", line 321, in _execute_function
    return await func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/adam/Developer/vcs/github.twardoch/pub/opero/tests/test_decorators.py", line 76, in decorated_func
    return await mock_func(value)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py", line 2300, in _execute_mock_call
    raise result
ValueError: First attempt
PASSED                                                                   [ 75%]
tests/test_decorators.py::test_orchestrate_decorator_process PASSED      [ 81%]
tests/test_decorators.py::test_orchestrate_decorator_with_concurrency PASSED [ 87%]
tests/test_decorators.py::test_orchestrate_decorator_with_sync_function PASSED [ 93%]
tests/test_package.py::test_version PASSED                               [100%]

============================= slowest 10 durations =============================
1.00s call     tests/test_core.py::test_orchestrator_with_retry
1.00s call     tests/test_decorators.py::test_orchestrate_decorator_retry

(8 durations < 0.005s hidden.  Use -vv to show these durations.)
============================== 16 passed in 2.27s ==============================

2025-03-05 11:35:47 - All checks completed
2025-03-05 11:35:47 - 
=== TODO.md ===
2025-03-05 11:35:47 - ---
this_file: TODO.md
---

# TODO

Tip: Periodically run `python ./cleanup.py status` to see results of lints and tests. Use `uv pip ...` not `pip ...`

## High Priority Tasks

- [ ] Complete the test suite with 90%+ coverage
  - [ ] Add tests for edge cases in retry mechanism
  - [ ] Create integration tests for complex scenarios
  - [ ] Add tests for error handling in concurrent operations
  - [ ] Implement test coverage reporting

- [ ] Optimize performance for high-throughput scenarios
  - [ ] Profile code to identify bottlenecks
  - [ ] Reduce overhead in the orchestration layer
  - [ ] Optimize retry logic for better performance
  - [ ] Improve concurrency management

- [ ] Fix remaining type issues in pyproject.toml
  - [ ] Resolve schema validation errors in hatch configuration
  - [ ] Update deprecated settings

## Medium Priority Tasks

- [ ] Add performance benchmarks
  - [ ] Create benchmark suite for key operations
  - [ ] Implement stress tests for concurrency and rate limiting
  - [ ] Add comparison benchmarks against similar libraries

- [ ] Infrastructure improvements
  - [ ] Set up CI/CD pipeline for automated testing and deployment
  - [ ] Configure code coverage reporting
  - [ ] Add pre-commit hooks for code quality
  - [ ] Create GitHub Actions workflow for publishing to PyPI
  - [ ] Set up automated dependency updates

- [ ] Compatibility enhancements
  - [ ] Test with different versions of dependencies
  - [ ] Add explicit support for asyncio event loop policies
  - [ ] Ensure thread safety for shared resources
  - [ ] Test on different operating systems

## Low Priority Tasks

- [ ] Feature enhancements
  - [ ] Implement middleware support for function transformation
  - [ ] Add metrics collection for performance monitoring
  - [ ] Create a CLI interface using `fire` and `rich`
  - [ ] Add support for distributed task queues
  - [ ] Implement streaming support with backpressure handling

## Completed Tasks

- [x] Fix all linter errors in the codebase
- [x] Create proper API documentation
- [x] Improve documentation
  - [x] Add more usage examples for common patterns
  - [x] Document best practices for error handling
  - [x] Add docstrings to all public functions and classes
  - [x] Create API reference documentation
- [x] Fix parameter order in retry function calls
- [x] Add fallback mechanism for handling None configurations
- [x] Fix type incompatibility issues in async/sync conversions
- [x] Enhance structured logging with context support

## Next Release (v0.2.0) Priorities

1. [x] Fix all linter errors in the codebase
2. [ ] Complete the test suite with 90%+ coverage
3. [x] Create proper API documentation
4. [ ] Optimize performance for high-throughput scenarios
5. [ ] Fix remaining type issues in pyproject.toml


2025-03-05 11:35:47 -  M CLEANUP.txt
 M REPO_CONTENT.txt

2025-03-05 11:35:47 - Changes detected in repository
